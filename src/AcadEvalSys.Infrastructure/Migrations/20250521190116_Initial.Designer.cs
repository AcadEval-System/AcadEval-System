// <auto-generated />
using System;
using AcadEvalSys.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcadEvalSys.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250521190116_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Asignatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnioTecnicatura")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PerfilProfesorId")
                        .HasColumnType("integer");

                    b.Property<int>("TecnicaturaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PerfilProfesorId");

                    b.HasIndex("TecnicaturaId");

                    b.ToTable("Asignaturas");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Competencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Competencias");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Encuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPorUsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescripcionAudienciaObjetivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PlantillaId")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPorUsuarioId");

                    b.HasIndex("PlantillaId");

                    b.ToTable("Encuestas");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Encuestado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EncuestaId")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaCompletado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EncuestaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Encuestados");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.EstadoWizard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DatosEstado")
                        .HasColumnType("text");

                    b.Property<int>("PasoActual")
                        .HasColumnType("integer");

                    b.Property<string>("TipoWizard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UltimaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("EstadosWizard");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Evaluacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComentariosGenerales")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EvaluadoUsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EvaluadorUsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaEvaluacion")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EvaluadoUsuarioId");

                    b.HasIndex("EvaluadorUsuarioId");

                    b.ToTable("Evaluaciones");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.EvaluacionCompetencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Calificacion")
                        .HasColumnType("integer");

                    b.Property<string>("Comentarios")
                        .HasColumnType("text");

                    b.Property<int>("CompetenciaId")
                        .HasColumnType("integer");

                    b.Property<int>("EvaluacionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompetenciaId");

                    b.HasIndex("EvaluacionId");

                    b.ToTable("EvaluacionesCompetencias");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PerfilAlumno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnioCursado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TecnicaturaId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TecnicaturaId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("PerfilesAlumnos");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PerfilCoordinador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TecnicaturaId")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TecnicaturaId")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("PerfilesCoordinadores");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PerfilProfesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("PerfilesProfesores");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PlantillaEncuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPorUsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPorUsuarioId");

                    b.ToTable("PlantillasEncuestas");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PreguntaEncuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EncuestaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Opciones")
                        .HasColumnType("text");

                    b.Property<int>("OrdenEnEncuesta")
                        .HasColumnType("integer");

                    b.Property<string>("TextoPregunta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoPregunta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EncuestaId");

                    b.ToTable("PreguntasEncuestas");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PreguntaPlantillaEncuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Opciones")
                        .HasColumnType("text");

                    b.Property<int>("OrdenEnPlantilla")
                        .HasColumnType("integer");

                    b.Property<int>("PlantillaId")
                        .HasColumnType("integer");

                    b.Property<string>("TextoPregunta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoPregunta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlantillaId");

                    b.ToTable("PreguntasPlantillasEncuestas");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.RespuestaEncuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EncuestadoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PreguntaEncuestaId")
                        .HasColumnType("integer");

                    b.Property<string>("ValorRespuesta")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EncuestadoId");

                    b.HasIndex("PreguntaEncuestaId");

                    b.ToTable("RespuestasEncuestas");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Tecnicatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PerfilCoordinadorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PerfilCoordinadorId")
                        .IsUnique()
                        .HasFilter("[PerfilCoordinadorId] IS NOT NULL");

                    b.ToTable("Tecnicaturas");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Asignatura", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.PerfilProfesor", "PerfilProfesor")
                        .WithMany("AsignaturasImpartidas")
                        .HasForeignKey("PerfilProfesorId");

                    b.HasOne("AcadEvalSys.Domain.Entities.Tecnicatura", "Tecnicatura")
                        .WithMany("Materias")
                        .HasForeignKey("TecnicaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerfilProfesor");

                    b.Navigation("Tecnicatura");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Encuesta", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", "CreadoPorUsuario")
                        .WithMany()
                        .HasForeignKey("CreadoPorUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.PlantillaEncuesta", "PlantillaEncuesta")
                        .WithMany("Encuestas")
                        .HasForeignKey("PlantillaId");

                    b.Navigation("CreadoPorUsuario");

                    b.Navigation("PlantillaEncuesta");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Encuestado", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Encuesta", "Encuesta")
                        .WithMany("Encuestados")
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encuesta");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.EstadoWizard", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Evaluacion", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", "EvaluadoUsuario")
                        .WithMany()
                        .HasForeignKey("EvaluadoUsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", "EvaluadorUsuario")
                        .WithMany()
                        .HasForeignKey("EvaluadorUsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EvaluadoUsuario");

                    b.Navigation("EvaluadorUsuario");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.EvaluacionCompetencia", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Competencia", "Competencia")
                        .WithMany("EvaluacionesCompetencias")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.Evaluacion", "Evaluacion")
                        .WithMany("EvaluacionesCompetencias")
                        .HasForeignKey("EvaluacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competencia");

                    b.Navigation("Evaluacion");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PerfilAlumno", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Tecnicatura", "Tecnicatura")
                        .WithMany("PerfilesAlumnos")
                        .HasForeignKey("TecnicaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", "Usuario")
                        .WithOne("PerfilAlumno")
                        .HasForeignKey("AcadEvalSys.Domain.Entities.PerfilAlumno", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tecnicatura");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PerfilCoordinador", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Tecnicatura", "TecnicaturaCoordinada")
                        .WithMany()
                        .HasForeignKey("TecnicaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", "Usuario")
                        .WithOne("PerfilCoordinador")
                        .HasForeignKey("AcadEvalSys.Domain.Entities.PerfilCoordinador", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TecnicaturaCoordinada");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PerfilProfesor", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", "Usuario")
                        .WithOne("PerfilProfesor")
                        .HasForeignKey("AcadEvalSys.Domain.Entities.PerfilProfesor", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PlantillaEncuesta", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", "CreadoPorUsuario")
                        .WithMany()
                        .HasForeignKey("CreadoPorUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreadoPorUsuario");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PreguntaEncuesta", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Encuesta", "Encuesta")
                        .WithMany("PreguntasEncuesta")
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encuesta");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PreguntaPlantillaEncuesta", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.PlantillaEncuesta", "PlantillaEncuesta")
                        .WithMany("PreguntasPlantillaEncuesta")
                        .HasForeignKey("PlantillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantillaEncuesta");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.RespuestaEncuesta", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Encuestado", "Encuestado")
                        .WithMany("RespuestasEncuesta")
                        .HasForeignKey("EncuestadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.PreguntaEncuesta", "PreguntaEncuesta")
                        .WithMany("RespuestasEncuesta")
                        .HasForeignKey("PreguntaEncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encuestado");

                    b.Navigation("PreguntaEncuesta");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Tecnicatura", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.PerfilCoordinador", "PerfilCoordinador")
                        .WithOne()
                        .HasForeignKey("AcadEvalSys.Domain.Entities.Tecnicatura", "PerfilCoordinadorId");

                    b.Navigation("PerfilCoordinador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Competencia", b =>
                {
                    b.Navigation("EvaluacionesCompetencias");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Encuesta", b =>
                {
                    b.Navigation("Encuestados");

                    b.Navigation("PreguntasEncuesta");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Encuestado", b =>
                {
                    b.Navigation("RespuestasEncuesta");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Evaluacion", b =>
                {
                    b.Navigation("EvaluacionesCompetencias");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PerfilProfesor", b =>
                {
                    b.Navigation("AsignaturasImpartidas");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PlantillaEncuesta", b =>
                {
                    b.Navigation("Encuestas");

                    b.Navigation("PreguntasPlantillaEncuesta");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.PreguntaEncuesta", b =>
                {
                    b.Navigation("RespuestasEncuesta");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Tecnicatura", b =>
                {
                    b.Navigation("Materias");

                    b.Navigation("PerfilesAlumnos");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("PerfilAlumno");

                    b.Navigation("PerfilCoordinador");

                    b.Navigation("PerfilProfesor");
                });
#pragma warning restore 612, 618
        }
    }
}
