// <auto-generated />
using System;
using AcadEvalSys.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcadEvalSys.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250625183020_AddNameToUser")]
    partial class AddNameToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Competency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Competencies");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.CompetencyLevelDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("CompetencyId", "Level")
                        .IsUnique();

                    b.ToTable("CompetencyLevelDescriptions");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Coordinator", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid?>("TechnicalCareerId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("TechnicalCareerId");

                    b.ToTable("Coordinators");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.EvaluationPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyClose")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyStart")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PeriodFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReminderFrequency")
                        .HasColumnType("text");

                    b.Property<bool>("SendReminders")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("EvaluationPeriods");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.EvaluationPeriodCareer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<Guid>("EvaluationPeriodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TechnicalCareerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EvaluationPeriodId");

                    b.HasIndex("TechnicalCareerId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("EvaluationPeriodCareer");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.FormQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompetencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetencyId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("FormQuestions");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Professor", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.ProfessorCompetencyAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<Guid>("EvaluationPeriodId")
                        .HasColumnType("uuid");

                    b.Property<string>("FormName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("NotificationSentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProfessorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("TechnicalCareerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompetencyId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EvaluationPeriodId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("TechnicalCareerId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ProfessorCompetencyAssignments");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.QuestionResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<Guid?>("FormQuestionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ResponseValue")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StudentCompetencyEvaluationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FormQuestionId");

                    b.HasIndex("StudentCompetencyEvaluationId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("QuestionResponses");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Student", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("CurrentYear")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TechnicalCareerId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("TechnicalCareerId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.StudentCompetencyEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CareerYear")
                        .HasColumnType("integer");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int?>("CompetencyLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<decimal?>("FinalScore")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProfessorCompetencyAssignmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ProfessorCompetencyAssignmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("StudentCompetencyEvaluations");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.StudentEvaluationReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<Guid>("EvaluationPeriodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ReportData")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EvaluationPeriodId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("StudentEvaluationReport");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.StudentSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ProfessorId")
                        .HasColumnType("text");

                    b.Property<Guid?>("TechnicalCareerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("TechnicalCareerId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.TechnicalCareer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TechnicalCareers");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CompetencyTechnicalCareer", b =>
                {
                    b.Property<Guid>("CompetenciesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TechnicalCareersId")
                        .HasColumnType("uuid");

                    b.HasKey("CompetenciesId", "TechnicalCareersId");

                    b.HasIndex("TechnicalCareersId");

                    b.ToTable("CompetencyTechnicalCareer");
                });

            modelBuilder.Entity("EvaluationPeriodTechnicalCareer", b =>
                {
                    b.Property<Guid>("EvaluationPeriodsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TechnicalCareersId")
                        .HasColumnType("uuid");

                    b.HasKey("EvaluationPeriodsId", "TechnicalCareersId");

                    b.HasIndex("TechnicalCareersId");

                    b.ToTable("EvaluationPeriodTechnicalCareer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Competency", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.CompetencyLevelDescription", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Competency", "Competency")
                        .WithMany("LevelDescriptions")
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("Competency");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Coordinator", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.TechnicalCareer", "TechnicalCareer")
                        .WithMany("Coordinators")
                        .HasForeignKey("TechnicalCareerId");

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "User")
                        .WithOne("Coordinator")
                        .HasForeignKey("AcadEvalSys.Domain.Entities.Coordinator", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechnicalCareer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.EvaluationPeriod", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.EvaluationPeriodCareer", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.EvaluationPeriod", "EvaluationPeriod")
                        .WithMany("EvaluationPeriodCareers")
                        .HasForeignKey("EvaluationPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.TechnicalCareer", "TechnicalCareer")
                        .WithMany("EvaluationPeriodCareers")
                        .HasForeignKey("TechnicalCareerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("EvaluationPeriod");

                    b.Navigation("TechnicalCareer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.FormQuestion", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Competency", "Competency")
                        .WithMany("FormQuestions")
                        .HasForeignKey("CompetencyId");

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("Competency");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Professor", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", "User")
                        .WithOne("Professor")
                        .HasForeignKey("AcadEvalSys.Domain.Entities.Professor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.ProfessorCompetencyAssignment", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Competency", "Competency")
                        .WithMany("ProfessorCompetencyAssignments")
                        .HasForeignKey("CompetencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.EvaluationPeriod", "EvaluationPeriod")
                        .WithMany("ProfessorCompetencyAssignments")
                        .HasForeignKey("EvaluationPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.Professor", "Professor")
                        .WithMany("ProfessorCompetencyAssignments")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.TechnicalCareer", "TechnicalCareer")
                        .WithMany("ProfessorCompetencyAssignments")
                        .HasForeignKey("TechnicalCareerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("Competency");

                    b.Navigation("CreatedByUser");

                    b.Navigation("EvaluationPeriod");

                    b.Navigation("Professor");

                    b.Navigation("TechnicalCareer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.QuestionResponse", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.FormQuestion", "FormQuestion")
                        .WithMany("QuestionResponses")
                        .HasForeignKey("FormQuestionId");

                    b.HasOne("AcadEvalSys.Domain.Entities.StudentCompetencyEvaluation", "StudentCompetencyEvaluation")
                        .WithMany("QuestionResponses")
                        .HasForeignKey("StudentCompetencyEvaluationId");

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("FormQuestion");

                    b.Navigation("StudentCompetencyEvaluation");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Student", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.TechnicalCareer", "TechnicalCareer")
                        .WithMany("Students")
                        .HasForeignKey("TechnicalCareerId");

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("AcadEvalSys.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechnicalCareer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.StudentCompetencyEvaluation", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.ProfessorCompetencyAssignment", "ProfessorCompetencyAssignment")
                        .WithMany("StudentCompetencyEvaluations")
                        .HasForeignKey("ProfessorCompetencyAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.Student", "Student")
                        .WithMany("StudentCompetencyEvaluations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ProfessorCompetencyAssignment");

                    b.Navigation("Student");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.StudentEvaluationReport", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.EvaluationPeriod", "EvaluationPeriod")
                        .WithMany("StudentEvaluationReports")
                        .HasForeignKey("EvaluationPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.Student", "Student")
                        .WithMany("EvaluationReports")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("EvaluationPeriod");

                    b.Navigation("Student");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.StudentSubject", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentId");

                    b.HasOne("AcadEvalSys.Domain.Entities.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectId");

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Subject", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.Professor", "Professor")
                        .WithMany("Subjects")
                        .HasForeignKey("ProfessorId");

                    b.HasOne("AcadEvalSys.Domain.Entities.TechnicalCareer", "TechnicalCareer")
                        .WithMany("Subjects")
                        .HasForeignKey("TechnicalCareerId");

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Professor");

                    b.Navigation("TechnicalCareer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.TechnicalCareer", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("AcadEvalSys.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("CompetencyTechnicalCareer", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.Competency", null)
                        .WithMany()
                        .HasForeignKey("CompetenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.TechnicalCareer", null)
                        .WithMany()
                        .HasForeignKey("TechnicalCareersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EvaluationPeriodTechnicalCareer", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.EvaluationPeriod", null)
                        .WithMany()
                        .HasForeignKey("EvaluationPeriodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.TechnicalCareer", null)
                        .WithMany()
                        .HasForeignKey("TechnicalCareersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcadEvalSys.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AcadEvalSys.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Competency", b =>
                {
                    b.Navigation("FormQuestions");

                    b.Navigation("LevelDescriptions");

                    b.Navigation("ProfessorCompetencyAssignments");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.EvaluationPeriod", b =>
                {
                    b.Navigation("EvaluationPeriodCareers");

                    b.Navigation("ProfessorCompetencyAssignments");

                    b.Navigation("StudentEvaluationReports");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.FormQuestion", b =>
                {
                    b.Navigation("QuestionResponses");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Professor", b =>
                {
                    b.Navigation("ProfessorCompetencyAssignments");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.ProfessorCompetencyAssignment", b =>
                {
                    b.Navigation("StudentCompetencyEvaluations");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Student", b =>
                {
                    b.Navigation("EvaluationReports");

                    b.Navigation("StudentCompetencyEvaluations");

                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.StudentCompetencyEvaluation", b =>
                {
                    b.Navigation("QuestionResponses");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.Subject", b =>
                {
                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.TechnicalCareer", b =>
                {
                    b.Navigation("Coordinators");

                    b.Navigation("EvaluationPeriodCareers");

                    b.Navigation("ProfessorCompetencyAssignments");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("AcadEvalSys.Domain.Entities.User", b =>
                {
                    b.Navigation("Coordinator");

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
